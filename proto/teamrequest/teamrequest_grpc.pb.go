// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/teamrequest/teamrequest.proto

package teamrequest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeamRequestService_CreateTeamRequest_FullMethodName   = "/teamrequest.TeamRequestService/CreateTeamRequest"
	TeamRequestService_FindTeamRequestByID_FullMethodName = "/teamrequest.TeamRequestService/FindTeamRequestByID"
	TeamRequestService_FindAllByPostID_FullMethodName     = "/teamrequest.TeamRequestService/FindAllByPostID"
	TeamRequestService_FindAllByRequestBy_FullMethodName  = "/teamrequest.TeamRequestService/FindAllByRequestBy"
	TeamRequestService_PatchTeamRequest_FullMethodName    = "/teamrequest.TeamRequestService/PatchTeamRequest"
	TeamRequestService_DeleteTeamRequest_FullMethodName   = "/teamrequest.TeamRequestService/DeleteTeamRequest"
)

// TeamRequestServiceClient is the client API for TeamRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type TeamRequestServiceClient interface {
	CreateTeamRequest(ctx context.Context, in *CreateTeamRequestRequest, opts ...grpc.CallOption) (*CreateTeamRequestResponse, error)
	FindTeamRequestByID(ctx context.Context, in *FindTeamRequestByIDRequest, opts ...grpc.CallOption) (*FindTeamRequestByIDResponse, error)
	FindAllByPostID(ctx context.Context, in *FindAllByPostIDRequest, opts ...grpc.CallOption) (*FindAllByPostIDResponse, error)
	FindAllByRequestBy(ctx context.Context, in *FindAllByRequestByRequest, opts ...grpc.CallOption) (*FindAllByRequestByResponse, error)
	PatchTeamRequest(ctx context.Context, in *PatchTeamRequestRequest, opts ...grpc.CallOption) (*PatchTeamRequestResponse, error)
	DeleteTeamRequest(ctx context.Context, in *DeleteTeamRequestRequest, opts ...grpc.CallOption) (*DeleteTeamRequestResponse, error)
}

type teamRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamRequestServiceClient(cc grpc.ClientConnInterface) TeamRequestServiceClient {
	return &teamRequestServiceClient{cc}
}

func (c *teamRequestServiceClient) CreateTeamRequest(ctx context.Context, in *CreateTeamRequestRequest, opts ...grpc.CallOption) (*CreateTeamRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTeamRequestResponse)
	err := c.cc.Invoke(ctx, TeamRequestService_CreateTeamRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRequestServiceClient) FindTeamRequestByID(ctx context.Context, in *FindTeamRequestByIDRequest, opts ...grpc.CallOption) (*FindTeamRequestByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTeamRequestByIDResponse)
	err := c.cc.Invoke(ctx, TeamRequestService_FindTeamRequestByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRequestServiceClient) FindAllByPostID(ctx context.Context, in *FindAllByPostIDRequest, opts ...grpc.CallOption) (*FindAllByPostIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllByPostIDResponse)
	err := c.cc.Invoke(ctx, TeamRequestService_FindAllByPostID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRequestServiceClient) FindAllByRequestBy(ctx context.Context, in *FindAllByRequestByRequest, opts ...grpc.CallOption) (*FindAllByRequestByResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllByRequestByResponse)
	err := c.cc.Invoke(ctx, TeamRequestService_FindAllByRequestBy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRequestServiceClient) PatchTeamRequest(ctx context.Context, in *PatchTeamRequestRequest, opts ...grpc.CallOption) (*PatchTeamRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatchTeamRequestResponse)
	err := c.cc.Invoke(ctx, TeamRequestService_PatchTeamRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRequestServiceClient) DeleteTeamRequest(ctx context.Context, in *DeleteTeamRequestRequest, opts ...grpc.CallOption) (*DeleteTeamRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTeamRequestResponse)
	err := c.cc.Invoke(ctx, TeamRequestService_DeleteTeamRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamRequestServiceServer is the server API for TeamRequestService service.
// All implementations must embed UnimplementedTeamRequestServiceServer
// for forward compatibility.
//
// Service definition
type TeamRequestServiceServer interface {
	CreateTeamRequest(context.Context, *CreateTeamRequestRequest) (*CreateTeamRequestResponse, error)
	FindTeamRequestByID(context.Context, *FindTeamRequestByIDRequest) (*FindTeamRequestByIDResponse, error)
	FindAllByPostID(context.Context, *FindAllByPostIDRequest) (*FindAllByPostIDResponse, error)
	FindAllByRequestBy(context.Context, *FindAllByRequestByRequest) (*FindAllByRequestByResponse, error)
	PatchTeamRequest(context.Context, *PatchTeamRequestRequest) (*PatchTeamRequestResponse, error)
	DeleteTeamRequest(context.Context, *DeleteTeamRequestRequest) (*DeleteTeamRequestResponse, error)
	mustEmbedUnimplementedTeamRequestServiceServer()
}

// UnimplementedTeamRequestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeamRequestServiceServer struct{}

func (UnimplementedTeamRequestServiceServer) CreateTeamRequest(context.Context, *CreateTeamRequestRequest) (*CreateTeamRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamRequest not implemented")
}
func (UnimplementedTeamRequestServiceServer) FindTeamRequestByID(context.Context, *FindTeamRequestByIDRequest) (*FindTeamRequestByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTeamRequestByID not implemented")
}
func (UnimplementedTeamRequestServiceServer) FindAllByPostID(context.Context, *FindAllByPostIDRequest) (*FindAllByPostIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByPostID not implemented")
}
func (UnimplementedTeamRequestServiceServer) FindAllByRequestBy(context.Context, *FindAllByRequestByRequest) (*FindAllByRequestByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByRequestBy not implemented")
}
func (UnimplementedTeamRequestServiceServer) PatchTeamRequest(context.Context, *PatchTeamRequestRequest) (*PatchTeamRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTeamRequest not implemented")
}
func (UnimplementedTeamRequestServiceServer) DeleteTeamRequest(context.Context, *DeleteTeamRequestRequest) (*DeleteTeamRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeamRequest not implemented")
}
func (UnimplementedTeamRequestServiceServer) mustEmbedUnimplementedTeamRequestServiceServer() {}
func (UnimplementedTeamRequestServiceServer) testEmbeddedByValue()                            {}

// UnsafeTeamRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamRequestServiceServer will
// result in compilation errors.
type UnsafeTeamRequestServiceServer interface {
	mustEmbedUnimplementedTeamRequestServiceServer()
}

func RegisterTeamRequestServiceServer(s grpc.ServiceRegistrar, srv TeamRequestServiceServer) {
	// If the following call pancis, it indicates UnimplementedTeamRequestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeamRequestService_ServiceDesc, srv)
}

func _TeamRequestService_CreateTeamRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRequestServiceServer).CreateTeamRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRequestService_CreateTeamRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRequestServiceServer).CreateTeamRequest(ctx, req.(*CreateTeamRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRequestService_FindTeamRequestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTeamRequestByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRequestServiceServer).FindTeamRequestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRequestService_FindTeamRequestByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRequestServiceServer).FindTeamRequestByID(ctx, req.(*FindTeamRequestByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRequestService_FindAllByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllByPostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRequestServiceServer).FindAllByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRequestService_FindAllByPostID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRequestServiceServer).FindAllByPostID(ctx, req.(*FindAllByPostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRequestService_FindAllByRequestBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllByRequestByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRequestServiceServer).FindAllByRequestBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRequestService_FindAllByRequestBy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRequestServiceServer).FindAllByRequestBy(ctx, req.(*FindAllByRequestByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRequestService_PatchTeamRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTeamRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRequestServiceServer).PatchTeamRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRequestService_PatchTeamRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRequestServiceServer).PatchTeamRequest(ctx, req.(*PatchTeamRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRequestService_DeleteTeamRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRequestServiceServer).DeleteTeamRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRequestService_DeleteTeamRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRequestServiceServer).DeleteTeamRequest(ctx, req.(*DeleteTeamRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamRequestService_ServiceDesc is the grpc.ServiceDesc for TeamRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teamrequest.TeamRequestService",
	HandlerType: (*TeamRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeamRequest",
			Handler:    _TeamRequestService_CreateTeamRequest_Handler,
		},
		{
			MethodName: "FindTeamRequestByID",
			Handler:    _TeamRequestService_FindTeamRequestByID_Handler,
		},
		{
			MethodName: "FindAllByPostID",
			Handler:    _TeamRequestService_FindAllByPostID_Handler,
		},
		{
			MethodName: "FindAllByRequestBy",
			Handler:    _TeamRequestService_FindAllByRequestBy_Handler,
		},
		{
			MethodName: "PatchTeamRequest",
			Handler:    _TeamRequestService_PatchTeamRequest_Handler,
		},
		{
			MethodName: "DeleteTeamRequest",
			Handler:    _TeamRequestService_DeleteTeamRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/teamrequest/teamrequest.proto",
}
