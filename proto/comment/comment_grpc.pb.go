// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/comment/comment.proto

package commentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommentService_CreateComment_FullMethodName          = "/comment.CommentService/CreateComment"
	CommentService_FindCommentByID_FullMethodName        = "/comment.CommentService/FindCommentByID"
	CommentService_FindCommentsByPostID_FullMethodName   = "/comment.CommentService/FindCommentsByPostID"
	CommentService_FindCommentsByUserID_FullMethodName   = "/comment.CommentService/FindCommentsByUserID"
	CommentService_FindCommentsByParentID_FullMethodName = "/comment.CommentService/FindCommentsByParentID"
	CommentService_FindAllComments_FullMethodName        = "/comment.CommentService/FindAllComments"
	CommentService_PatchComment_FullMethodName           = "/comment.CommentService/PatchComment"
	CommentService_DeleteComment_FullMethodName          = "/comment.CommentService/DeleteComment"
)

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	FindCommentByID(ctx context.Context, in *FindCommentByIDRequest, opts ...grpc.CallOption) (*FindCommentByIDResponse, error)
	FindCommentsByPostID(ctx context.Context, in *FindCommentsByPostIDRequest, opts ...grpc.CallOption) (*FindCommentsByPostIDResponse, error)
	FindCommentsByUserID(ctx context.Context, in *FindCommentsByUserIDRequest, opts ...grpc.CallOption) (*FindCommentsByUserIDResponse, error)
	FindCommentsByParentID(ctx context.Context, in *FindCommentsByParentIDRequest, opts ...grpc.CallOption) (*FindCommentsByParentIDResponse, error)
	FindAllComments(ctx context.Context, in *FindAllCommentsRequest, opts ...grpc.CallOption) (*FindAllCommentsResponse, error)
	PatchComment(ctx context.Context, in *PatchCommentRequest, opts ...grpc.CallOption) (*PatchCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) FindCommentByID(ctx context.Context, in *FindCommentByIDRequest, opts ...grpc.CallOption) (*FindCommentByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCommentByIDResponse)
	err := c.cc.Invoke(ctx, CommentService_FindCommentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) FindCommentsByPostID(ctx context.Context, in *FindCommentsByPostIDRequest, opts ...grpc.CallOption) (*FindCommentsByPostIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCommentsByPostIDResponse)
	err := c.cc.Invoke(ctx, CommentService_FindCommentsByPostID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) FindCommentsByUserID(ctx context.Context, in *FindCommentsByUserIDRequest, opts ...grpc.CallOption) (*FindCommentsByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCommentsByUserIDResponse)
	err := c.cc.Invoke(ctx, CommentService_FindCommentsByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) FindCommentsByParentID(ctx context.Context, in *FindCommentsByParentIDRequest, opts ...grpc.CallOption) (*FindCommentsByParentIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCommentsByParentIDResponse)
	err := c.cc.Invoke(ctx, CommentService_FindCommentsByParentID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) FindAllComments(ctx context.Context, in *FindAllCommentsRequest, opts ...grpc.CallOption) (*FindAllCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllCommentsResponse)
	err := c.cc.Invoke(ctx, CommentService_FindAllComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) PatchComment(ctx context.Context, in *PatchCommentRequest, opts ...grpc.CallOption) (*PatchCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatchCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_PatchComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility.
type CommentServiceServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	FindCommentByID(context.Context, *FindCommentByIDRequest) (*FindCommentByIDResponse, error)
	FindCommentsByPostID(context.Context, *FindCommentsByPostIDRequest) (*FindCommentsByPostIDResponse, error)
	FindCommentsByUserID(context.Context, *FindCommentsByUserIDRequest) (*FindCommentsByUserIDResponse, error)
	FindCommentsByParentID(context.Context, *FindCommentsByParentIDRequest) (*FindCommentsByParentIDResponse, error)
	FindAllComments(context.Context, *FindAllCommentsRequest) (*FindAllCommentsResponse, error)
	PatchComment(context.Context, *PatchCommentRequest) (*PatchCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentServiceServer struct{}

func (UnimplementedCommentServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentServiceServer) FindCommentByID(context.Context, *FindCommentByIDRequest) (*FindCommentByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommentByID not implemented")
}
func (UnimplementedCommentServiceServer) FindCommentsByPostID(context.Context, *FindCommentsByPostIDRequest) (*FindCommentsByPostIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommentsByPostID not implemented")
}
func (UnimplementedCommentServiceServer) FindCommentsByUserID(context.Context, *FindCommentsByUserIDRequest) (*FindCommentsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommentsByUserID not implemented")
}
func (UnimplementedCommentServiceServer) FindCommentsByParentID(context.Context, *FindCommentsByParentIDRequest) (*FindCommentsByParentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommentsByParentID not implemented")
}
func (UnimplementedCommentServiceServer) FindAllComments(context.Context, *FindAllCommentsRequest) (*FindAllCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllComments not implemented")
}
func (UnimplementedCommentServiceServer) PatchComment(context.Context, *PatchCommentRequest) (*PatchCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchComment not implemented")
}
func (UnimplementedCommentServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}
func (UnimplementedCommentServiceServer) testEmbeddedByValue()                        {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_FindCommentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCommentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).FindCommentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_FindCommentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).FindCommentByID(ctx, req.(*FindCommentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_FindCommentsByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCommentsByPostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).FindCommentsByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_FindCommentsByPostID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).FindCommentsByPostID(ctx, req.(*FindCommentsByPostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_FindCommentsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCommentsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).FindCommentsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_FindCommentsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).FindCommentsByUserID(ctx, req.(*FindCommentsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_FindCommentsByParentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCommentsByParentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).FindCommentsByParentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_FindCommentsByParentID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).FindCommentsByParentID(ctx, req.(*FindCommentsByParentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_FindAllComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).FindAllComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_FindAllComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).FindAllComments(ctx, req.(*FindAllCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_PatchComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).PatchComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_PatchComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).PatchComment(ctx, req.(*PatchCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentService_CreateComment_Handler,
		},
		{
			MethodName: "FindCommentByID",
			Handler:    _CommentService_FindCommentByID_Handler,
		},
		{
			MethodName: "FindCommentsByPostID",
			Handler:    _CommentService_FindCommentsByPostID_Handler,
		},
		{
			MethodName: "FindCommentsByUserID",
			Handler:    _CommentService_FindCommentsByUserID_Handler,
		},
		{
			MethodName: "FindCommentsByParentID",
			Handler:    _CommentService_FindCommentsByParentID_Handler,
		},
		{
			MethodName: "FindAllComments",
			Handler:    _CommentService_FindAllComments_Handler,
		},
		{
			MethodName: "PatchComment",
			Handler:    _CommentService_PatchComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentService_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/comment/comment.proto",
}
