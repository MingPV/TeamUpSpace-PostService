// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/answer/answer.proto

package answer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnswerService_CreateAnswer_FullMethodName                = "/answer.AnswerService/CreateAnswer"
	AnswerService_FindAnswerByID_FullMethodName              = "/answer.AnswerService/FindAnswerByID"
	AnswerService_FindAllAnswersByPostID_FullMethodName      = "/answer.AnswerService/FindAllAnswersByPostID"
	AnswerService_FindAnswerByPostIDAndUserID_FullMethodName = "/answer.AnswerService/FindAnswerByPostIDAndUserID"
	AnswerService_FindAllAnswersByUserID_FullMethodName      = "/answer.AnswerService/FindAllAnswersByUserID"
	AnswerService_FindAllAnswers_FullMethodName              = "/answer.AnswerService/FindAllAnswers"
	AnswerService_DeleteAnswer_FullMethodName                = "/answer.AnswerService/DeleteAnswer"
)

// AnswerServiceClient is the client API for AnswerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnswerServiceClient interface {
	CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*CreateAnswerResponse, error)
	FindAnswerByID(ctx context.Context, in *FindAnswerByIDRequest, opts ...grpc.CallOption) (*FindAnswerByIDResponse, error)
	FindAllAnswersByPostID(ctx context.Context, in *FindAllAnswersByPostIDRequest, opts ...grpc.CallOption) (*FindAllAnswersByPostIDResponse, error)
	FindAnswerByPostIDAndUserID(ctx context.Context, in *FindAnswerByPostIDAndUserIDRequest, opts ...grpc.CallOption) (*FindAnswerByPostIDAndUserIDResponse, error)
	FindAllAnswersByUserID(ctx context.Context, in *FindAllAnswersByUserIDRequest, opts ...grpc.CallOption) (*FindAllAnswersByUserIDResponse, error)
	FindAllAnswers(ctx context.Context, in *FindAllAnswersRequest, opts ...grpc.CallOption) (*FindAllAnswersResponse, error)
	DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*DeleteAnswerResponse, error)
}

type answerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnswerServiceClient(cc grpc.ClientConnInterface) AnswerServiceClient {
	return &answerServiceClient{cc}
}

func (c *answerServiceClient) CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*CreateAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnswerResponse)
	err := c.cc.Invoke(ctx, AnswerService_CreateAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) FindAnswerByID(ctx context.Context, in *FindAnswerByIDRequest, opts ...grpc.CallOption) (*FindAnswerByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAnswerByIDResponse)
	err := c.cc.Invoke(ctx, AnswerService_FindAnswerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) FindAllAnswersByPostID(ctx context.Context, in *FindAllAnswersByPostIDRequest, opts ...grpc.CallOption) (*FindAllAnswersByPostIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllAnswersByPostIDResponse)
	err := c.cc.Invoke(ctx, AnswerService_FindAllAnswersByPostID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) FindAnswerByPostIDAndUserID(ctx context.Context, in *FindAnswerByPostIDAndUserIDRequest, opts ...grpc.CallOption) (*FindAnswerByPostIDAndUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAnswerByPostIDAndUserIDResponse)
	err := c.cc.Invoke(ctx, AnswerService_FindAnswerByPostIDAndUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) FindAllAnswersByUserID(ctx context.Context, in *FindAllAnswersByUserIDRequest, opts ...grpc.CallOption) (*FindAllAnswersByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllAnswersByUserIDResponse)
	err := c.cc.Invoke(ctx, AnswerService_FindAllAnswersByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) FindAllAnswers(ctx context.Context, in *FindAllAnswersRequest, opts ...grpc.CallOption) (*FindAllAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllAnswersResponse)
	err := c.cc.Invoke(ctx, AnswerService_FindAllAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*DeleteAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnswerResponse)
	err := c.cc.Invoke(ctx, AnswerService_DeleteAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnswerServiceServer is the server API for AnswerService service.
// All implementations must embed UnimplementedAnswerServiceServer
// for forward compatibility.
type AnswerServiceServer interface {
	CreateAnswer(context.Context, *CreateAnswerRequest) (*CreateAnswerResponse, error)
	FindAnswerByID(context.Context, *FindAnswerByIDRequest) (*FindAnswerByIDResponse, error)
	FindAllAnswersByPostID(context.Context, *FindAllAnswersByPostIDRequest) (*FindAllAnswersByPostIDResponse, error)
	FindAnswerByPostIDAndUserID(context.Context, *FindAnswerByPostIDAndUserIDRequest) (*FindAnswerByPostIDAndUserIDResponse, error)
	FindAllAnswersByUserID(context.Context, *FindAllAnswersByUserIDRequest) (*FindAllAnswersByUserIDResponse, error)
	FindAllAnswers(context.Context, *FindAllAnswersRequest) (*FindAllAnswersResponse, error)
	DeleteAnswer(context.Context, *DeleteAnswerRequest) (*DeleteAnswerResponse, error)
	mustEmbedUnimplementedAnswerServiceServer()
}

// UnimplementedAnswerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnswerServiceServer struct{}

func (UnimplementedAnswerServiceServer) CreateAnswer(context.Context, *CreateAnswerRequest) (*CreateAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedAnswerServiceServer) FindAnswerByID(context.Context, *FindAnswerByIDRequest) (*FindAnswerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAnswerByID not implemented")
}
func (UnimplementedAnswerServiceServer) FindAllAnswersByPostID(context.Context, *FindAllAnswersByPostIDRequest) (*FindAllAnswersByPostIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAnswersByPostID not implemented")
}
func (UnimplementedAnswerServiceServer) FindAnswerByPostIDAndUserID(context.Context, *FindAnswerByPostIDAndUserIDRequest) (*FindAnswerByPostIDAndUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAnswerByPostIDAndUserID not implemented")
}
func (UnimplementedAnswerServiceServer) FindAllAnswersByUserID(context.Context, *FindAllAnswersByUserIDRequest) (*FindAllAnswersByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAnswersByUserID not implemented")
}
func (UnimplementedAnswerServiceServer) FindAllAnswers(context.Context, *FindAllAnswersRequest) (*FindAllAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAnswers not implemented")
}
func (UnimplementedAnswerServiceServer) DeleteAnswer(context.Context, *DeleteAnswerRequest) (*DeleteAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnswer not implemented")
}
func (UnimplementedAnswerServiceServer) mustEmbedUnimplementedAnswerServiceServer() {}
func (UnimplementedAnswerServiceServer) testEmbeddedByValue()                       {}

// UnsafeAnswerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnswerServiceServer will
// result in compilation errors.
type UnsafeAnswerServiceServer interface {
	mustEmbedUnimplementedAnswerServiceServer()
}

func RegisterAnswerServiceServer(s grpc.ServiceRegistrar, srv AnswerServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnswerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnswerService_ServiceDesc, srv)
}

func _AnswerService_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_CreateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).CreateAnswer(ctx, req.(*CreateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_FindAnswerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAnswerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).FindAnswerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_FindAnswerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).FindAnswerByID(ctx, req.(*FindAnswerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_FindAllAnswersByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllAnswersByPostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).FindAllAnswersByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_FindAllAnswersByPostID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).FindAllAnswersByPostID(ctx, req.(*FindAllAnswersByPostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_FindAnswerByPostIDAndUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAnswerByPostIDAndUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).FindAnswerByPostIDAndUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_FindAnswerByPostIDAndUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).FindAnswerByPostIDAndUserID(ctx, req.(*FindAnswerByPostIDAndUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_FindAllAnswersByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllAnswersByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).FindAllAnswersByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_FindAllAnswersByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).FindAllAnswersByUserID(ctx, req.(*FindAllAnswersByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_FindAllAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).FindAllAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_FindAllAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).FindAllAnswers(ctx, req.(*FindAllAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_DeleteAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).DeleteAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_DeleteAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).DeleteAnswer(ctx, req.(*DeleteAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnswerService_ServiceDesc is the grpc.ServiceDesc for AnswerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnswerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "answer.AnswerService",
	HandlerType: (*AnswerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnswer",
			Handler:    _AnswerService_CreateAnswer_Handler,
		},
		{
			MethodName: "FindAnswerByID",
			Handler:    _AnswerService_FindAnswerByID_Handler,
		},
		{
			MethodName: "FindAllAnswersByPostID",
			Handler:    _AnswerService_FindAllAnswersByPostID_Handler,
		},
		{
			MethodName: "FindAnswerByPostIDAndUserID",
			Handler:    _AnswerService_FindAnswerByPostIDAndUserID_Handler,
		},
		{
			MethodName: "FindAllAnswersByUserID",
			Handler:    _AnswerService_FindAllAnswersByUserID_Handler,
		},
		{
			MethodName: "FindAllAnswers",
			Handler:    _AnswerService_FindAllAnswers_Handler,
		},
		{
			MethodName: "DeleteAnswer",
			Handler:    _AnswerService_DeleteAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/answer/answer.proto",
}
