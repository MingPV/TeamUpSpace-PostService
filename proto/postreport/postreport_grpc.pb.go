// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/postreport/postreport.proto

package postreport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostReportService_CreatePostReport_FullMethodName   = "/postreport.PostReportService/CreatePostReport"
	PostReportService_FindPostReportByID_FullMethodName = "/postreport.PostReportService/FindPostReportByID"
	PostReportService_FindAllPostReports_FullMethodName = "/postreport.PostReportService/FindAllPostReports"
	PostReportService_PatchPostReport_FullMethodName    = "/postreport.PostReportService/PatchPostReport"
	PostReportService_DeletePostReport_FullMethodName   = "/postreport.PostReportService/DeletePostReport"
)

// PostReportServiceClient is the client API for PostReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostReportServiceClient interface {
	CreatePostReport(ctx context.Context, in *CreatePostReportRequest, opts ...grpc.CallOption) (*CreatePostReportResponse, error)
	FindPostReportByID(ctx context.Context, in *FindPostReportByIDRequest, opts ...grpc.CallOption) (*FindPostReportByIDResponse, error)
	FindAllPostReports(ctx context.Context, in *FindAllPostReportsRequest, opts ...grpc.CallOption) (*FindAllPostReportsResponse, error)
	PatchPostReport(ctx context.Context, in *PatchPostReportRequest, opts ...grpc.CallOption) (*PatchPostReportResponse, error)
	DeletePostReport(ctx context.Context, in *DeletePostReportRequest, opts ...grpc.CallOption) (*DeletePostReportResponse, error)
}

type postReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostReportServiceClient(cc grpc.ClientConnInterface) PostReportServiceClient {
	return &postReportServiceClient{cc}
}

func (c *postReportServiceClient) CreatePostReport(ctx context.Context, in *CreatePostReportRequest, opts ...grpc.CallOption) (*CreatePostReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostReportResponse)
	err := c.cc.Invoke(ctx, PostReportService_CreatePostReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postReportServiceClient) FindPostReportByID(ctx context.Context, in *FindPostReportByIDRequest, opts ...grpc.CallOption) (*FindPostReportByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPostReportByIDResponse)
	err := c.cc.Invoke(ctx, PostReportService_FindPostReportByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postReportServiceClient) FindAllPostReports(ctx context.Context, in *FindAllPostReportsRequest, opts ...grpc.CallOption) (*FindAllPostReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllPostReportsResponse)
	err := c.cc.Invoke(ctx, PostReportService_FindAllPostReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postReportServiceClient) PatchPostReport(ctx context.Context, in *PatchPostReportRequest, opts ...grpc.CallOption) (*PatchPostReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatchPostReportResponse)
	err := c.cc.Invoke(ctx, PostReportService_PatchPostReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postReportServiceClient) DeletePostReport(ctx context.Context, in *DeletePostReportRequest, opts ...grpc.CallOption) (*DeletePostReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePostReportResponse)
	err := c.cc.Invoke(ctx, PostReportService_DeletePostReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostReportServiceServer is the server API for PostReportService service.
// All implementations must embed UnimplementedPostReportServiceServer
// for forward compatibility.
type PostReportServiceServer interface {
	CreatePostReport(context.Context, *CreatePostReportRequest) (*CreatePostReportResponse, error)
	FindPostReportByID(context.Context, *FindPostReportByIDRequest) (*FindPostReportByIDResponse, error)
	FindAllPostReports(context.Context, *FindAllPostReportsRequest) (*FindAllPostReportsResponse, error)
	PatchPostReport(context.Context, *PatchPostReportRequest) (*PatchPostReportResponse, error)
	DeletePostReport(context.Context, *DeletePostReportRequest) (*DeletePostReportResponse, error)
	mustEmbedUnimplementedPostReportServiceServer()
}

// UnimplementedPostReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostReportServiceServer struct{}

func (UnimplementedPostReportServiceServer) CreatePostReport(context.Context, *CreatePostReportRequest) (*CreatePostReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostReport not implemented")
}
func (UnimplementedPostReportServiceServer) FindPostReportByID(context.Context, *FindPostReportByIDRequest) (*FindPostReportByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPostReportByID not implemented")
}
func (UnimplementedPostReportServiceServer) FindAllPostReports(context.Context, *FindAllPostReportsRequest) (*FindAllPostReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPostReports not implemented")
}
func (UnimplementedPostReportServiceServer) PatchPostReport(context.Context, *PatchPostReportRequest) (*PatchPostReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPostReport not implemented")
}
func (UnimplementedPostReportServiceServer) DeletePostReport(context.Context, *DeletePostReportRequest) (*DeletePostReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostReport not implemented")
}
func (UnimplementedPostReportServiceServer) mustEmbedUnimplementedPostReportServiceServer() {}
func (UnimplementedPostReportServiceServer) testEmbeddedByValue()                           {}

// UnsafePostReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostReportServiceServer will
// result in compilation errors.
type UnsafePostReportServiceServer interface {
	mustEmbedUnimplementedPostReportServiceServer()
}

func RegisterPostReportServiceServer(s grpc.ServiceRegistrar, srv PostReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostReportService_ServiceDesc, srv)
}

func _PostReportService_CreatePostReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostReportServiceServer).CreatePostReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostReportService_CreatePostReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostReportServiceServer).CreatePostReport(ctx, req.(*CreatePostReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostReportService_FindPostReportByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPostReportByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostReportServiceServer).FindPostReportByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostReportService_FindPostReportByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostReportServiceServer).FindPostReportByID(ctx, req.(*FindPostReportByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostReportService_FindAllPostReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllPostReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostReportServiceServer).FindAllPostReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostReportService_FindAllPostReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostReportServiceServer).FindAllPostReports(ctx, req.(*FindAllPostReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostReportService_PatchPostReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPostReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostReportServiceServer).PatchPostReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostReportService_PatchPostReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostReportServiceServer).PatchPostReport(ctx, req.(*PatchPostReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostReportService_DeletePostReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostReportServiceServer).DeletePostReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostReportService_DeletePostReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostReportServiceServer).DeletePostReport(ctx, req.(*DeletePostReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostReportService_ServiceDesc is the grpc.ServiceDesc for PostReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postreport.PostReportService",
	HandlerType: (*PostReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePostReport",
			Handler:    _PostReportService_CreatePostReport_Handler,
		},
		{
			MethodName: "FindPostReportByID",
			Handler:    _PostReportService_FindPostReportByID_Handler,
		},
		{
			MethodName: "FindAllPostReports",
			Handler:    _PostReportService_FindAllPostReports_Handler,
		},
		{
			MethodName: "PatchPostReport",
			Handler:    _PostReportService_PatchPostReport_Handler,
		},
		{
			MethodName: "DeletePostReport",
			Handler:    _PostReportService_DeletePostReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/postreport/postreport.proto",
}
