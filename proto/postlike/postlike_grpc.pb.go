// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/postlike/postlike.proto

package postlike

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostLikeService_CreatePostLike_FullMethodName           = "/postlike.PostLikeService/CreatePostLike"
	PostLikeService_FindAllPostLikesByPostID_FullMethodName = "/postlike.PostLikeService/FindAllPostLikesByPostID"
	PostLikeService_FindAllPostLikesByUserID_FullMethodName = "/postlike.PostLikeService/FindAllPostLikesByUserID"
	PostLikeService_DeletePostLike_FullMethodName           = "/postlike.PostLikeService/DeletePostLike"
)

// PostLikeServiceClient is the client API for PostLikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostLikeServiceClient interface {
	CreatePostLike(ctx context.Context, in *CreatePostLikeRequest, opts ...grpc.CallOption) (*CreatePostLikeResponse, error)
	FindAllPostLikesByPostID(ctx context.Context, in *FindAllPostLikesByPostIDRequest, opts ...grpc.CallOption) (*FindAllPostLikesByPostIDResponse, error)
	FindAllPostLikesByUserID(ctx context.Context, in *FindAllPostLikesByUserIDRequest, opts ...grpc.CallOption) (*FindAllPostLikesByUserIDResponse, error)
	DeletePostLike(ctx context.Context, in *DeletePostLikeRequest, opts ...grpc.CallOption) (*DeletePostLikeResponse, error)
}

type postLikeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostLikeServiceClient(cc grpc.ClientConnInterface) PostLikeServiceClient {
	return &postLikeServiceClient{cc}
}

func (c *postLikeServiceClient) CreatePostLike(ctx context.Context, in *CreatePostLikeRequest, opts ...grpc.CallOption) (*CreatePostLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostLikeResponse)
	err := c.cc.Invoke(ctx, PostLikeService_CreatePostLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikeServiceClient) FindAllPostLikesByPostID(ctx context.Context, in *FindAllPostLikesByPostIDRequest, opts ...grpc.CallOption) (*FindAllPostLikesByPostIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllPostLikesByPostIDResponse)
	err := c.cc.Invoke(ctx, PostLikeService_FindAllPostLikesByPostID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikeServiceClient) FindAllPostLikesByUserID(ctx context.Context, in *FindAllPostLikesByUserIDRequest, opts ...grpc.CallOption) (*FindAllPostLikesByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllPostLikesByUserIDResponse)
	err := c.cc.Invoke(ctx, PostLikeService_FindAllPostLikesByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikeServiceClient) DeletePostLike(ctx context.Context, in *DeletePostLikeRequest, opts ...grpc.CallOption) (*DeletePostLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePostLikeResponse)
	err := c.cc.Invoke(ctx, PostLikeService_DeletePostLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostLikeServiceServer is the server API for PostLikeService service.
// All implementations must embed UnimplementedPostLikeServiceServer
// for forward compatibility.
type PostLikeServiceServer interface {
	CreatePostLike(context.Context, *CreatePostLikeRequest) (*CreatePostLikeResponse, error)
	FindAllPostLikesByPostID(context.Context, *FindAllPostLikesByPostIDRequest) (*FindAllPostLikesByPostIDResponse, error)
	FindAllPostLikesByUserID(context.Context, *FindAllPostLikesByUserIDRequest) (*FindAllPostLikesByUserIDResponse, error)
	DeletePostLike(context.Context, *DeletePostLikeRequest) (*DeletePostLikeResponse, error)
	mustEmbedUnimplementedPostLikeServiceServer()
}

// UnimplementedPostLikeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostLikeServiceServer struct{}

func (UnimplementedPostLikeServiceServer) CreatePostLike(context.Context, *CreatePostLikeRequest) (*CreatePostLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostLike not implemented")
}
func (UnimplementedPostLikeServiceServer) FindAllPostLikesByPostID(context.Context, *FindAllPostLikesByPostIDRequest) (*FindAllPostLikesByPostIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPostLikesByPostID not implemented")
}
func (UnimplementedPostLikeServiceServer) FindAllPostLikesByUserID(context.Context, *FindAllPostLikesByUserIDRequest) (*FindAllPostLikesByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPostLikesByUserID not implemented")
}
func (UnimplementedPostLikeServiceServer) DeletePostLike(context.Context, *DeletePostLikeRequest) (*DeletePostLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostLike not implemented")
}
func (UnimplementedPostLikeServiceServer) mustEmbedUnimplementedPostLikeServiceServer() {}
func (UnimplementedPostLikeServiceServer) testEmbeddedByValue()                         {}

// UnsafePostLikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostLikeServiceServer will
// result in compilation errors.
type UnsafePostLikeServiceServer interface {
	mustEmbedUnimplementedPostLikeServiceServer()
}

func RegisterPostLikeServiceServer(s grpc.ServiceRegistrar, srv PostLikeServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostLikeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostLikeService_ServiceDesc, srv)
}

func _PostLikeService_CreatePostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikeServiceServer).CreatePostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostLikeService_CreatePostLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikeServiceServer).CreatePostLike(ctx, req.(*CreatePostLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikeService_FindAllPostLikesByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllPostLikesByPostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikeServiceServer).FindAllPostLikesByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostLikeService_FindAllPostLikesByPostID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikeServiceServer).FindAllPostLikesByPostID(ctx, req.(*FindAllPostLikesByPostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikeService_FindAllPostLikesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllPostLikesByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikeServiceServer).FindAllPostLikesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostLikeService_FindAllPostLikesByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikeServiceServer).FindAllPostLikesByUserID(ctx, req.(*FindAllPostLikesByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikeService_DeletePostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikeServiceServer).DeletePostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostLikeService_DeletePostLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikeServiceServer).DeletePostLike(ctx, req.(*DeletePostLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostLikeService_ServiceDesc is the grpc.ServiceDesc for PostLikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostLikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postlike.PostLikeService",
	HandlerType: (*PostLikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePostLike",
			Handler:    _PostLikeService_CreatePostLike_Handler,
		},
		{
			MethodName: "FindAllPostLikesByPostID",
			Handler:    _PostLikeService_FindAllPostLikesByPostID_Handler,
		},
		{
			MethodName: "FindAllPostLikesByUserID",
			Handler:    _PostLikeService_FindAllPostLikesByUserID_Handler,
		},
		{
			MethodName: "DeletePostLike",
			Handler:    _PostLikeService_DeletePostLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/postlike/postlike.proto",
}
